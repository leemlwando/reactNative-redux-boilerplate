import React from "react"
import PushNotification from 'react-native-push-notification';
import {connect} from "react-redux";
import {startFetchingToken,errorFetchingToken,successFetchingToken,failedFetchingToken,stopFetchingToken} from "../../state-manager/actions/push";
import appConfig from "../../app.json";

class NotifService extends React.Component<props> {

  constructor(onRegister, onNotification) {
    this.configure(onRegister, onNotification);
  }

  configure(onRegister, onNotification) {
      
    PushNotification.configure({
      // (optional) Called when Token is generated (iOS and Android)
      onRegister: onRegister, //this._onRegister.bind(this),

      // (required) Called when a remote or local notification is opened or received
      onNotification: onNotification, //this._onNotification,

      // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
      senderID: "510713861888",

      // IOS ONLY (optional): default: all - Permissions to register.
      permissions: {
        alert: true,
        badge: true,
        sound: true
      },

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
        * (optional) default: true
        * - Specified if permissions (ios) and token (android and ios) will requested or not,
        * - if not, you must call PushNotificationsHandler.requestPermissions() later
        */
      requestPermissions: true,
    });
  }

  requestPermissions(){
    return PushNotification.requestPermissions()
  }

  localNotif() {

    PushNotification.localNotification({
      /* Android Only Properties */
      id: this.props.notification_id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: this.props.notification_ticker, // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: this.props.notification_large_icon || "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: this.props.notification_small_icon || "ic_launcher", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: this.props.notification_big_text, // (optional) default: "message" prop
      subText: this.props.sub_text, // (optional) default: none
      color: this.props.notification_color || "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: this.props.notification_tag || "general", // (optional) add tag to message
      group: this.props.notification_group || "general", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: null, // (optional) default: null
      userInfo: null, // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: this.props.notification_title, // (optional)
      message: this.props.notification_message, // (required)
      playSound: false, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    });
  }

  scheduleNotif() {
    
    PushNotification.localNotificationSchedule({
      date: this.props.notification_date, // new Date(Date.now() + (60 * 1000))
      /* Android Only Properties */
      id: this.props.notification_id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: this.props.notification_ticker, // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: this.props.notification_large_icon, // (optional) default: "ic_launcher"
      smallIcon: this.props.notification_small_icon, // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: this.props.notification_big_text, // (optional) default: "message" prop
      subText: this.props.notification_sub_text, // (optional) default: none
      color: this.props.notification_color || "blue", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: this.props.notification_tag || "general", // (optional) add tag to message
      group: this.props.notification_group || "general", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: null, // (optional) default: null
      userInfo: null, // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: this.props.notification_title, // (optional)
      message: this.props.notification_message, // (required)
      playSound: true, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    });
  }

  checkPermission(cbk) {
    return PushNotification.checkPermissions(cbk);
  }

  cancelNotif() {
    PushNotification.cancelLocalNotifications({id: this.state.notification_id});
  }

  cancelAll() {
    PushNotification.cancelAllLocalNotifications();
  }
}


function mapStateToProps (state) {
  console.warn(state)
  return {
    greeting: state.greeting,
      //token registration
    senderID: state.push.senderID,
    registrationToken: state.push.registrationToken,
    fcmRegistred: state.push.fcmRegistred,
      //store notifications
    notifications: state.push.notifications,
      //fetch token device
    fetch_token_start: state.push.fetch_token_start,
    fetch_token_error: state.push.fetch_token_error,
    fetch_token_success: state.push.fetch_token_success,
    fetch_token_message: state.push.fetch_token_message,
    fetch_token_failure: state.push.fetch_token_failure,
    fetch_token_stop: state.push.fetch_token_stop,
        //sending token to server
    send_token_to_server_start: state.push.send_token_to_server_start,
    send_token_to_server_error: state.push.send_token_to_server_error,
    send_token_to_server_success: state.push.send_token_to_server_success,
    send_token_to_server_failure: state.push.send_token_to_server_failure,
    send_token_to_server_stop: state.push.send_token_to_server_stop,
    send_token_to_server_message: state.push.send_token_to_server_message,
        //notification configurations
    notification_date: state.push.notification_date,
    notification_ticker:  state.push.notification_ticker,
    notification_large_icon:  state.push.notification_large_icon,
    notification_small_icon:  state.push.notification_small_icon,
    notification_big_text:  state.push.notification_big_text,
    notification_sub_text:  state.push.notification_big_text,
    notification_color:  state.push.notification_color,
    notification_tag:  state.push.notification_tag,
    notification_group:  state.push.group,
    notification_title:  state.push.notification_title,
    notification_message:  state.push.notification_message
  }
}

function mapDispatchToProps (dispatch) {
 
  return {
    greet: () => dispatch(MainAction()),
    startFetchingToken:(payload)=>dispatch(startFetchingToken(payload)),
    errorFetchingToken: (payload)=>dispatch(errorFetchingToken(payload)),
    successFetchingToken: (payload)=>dispatch(successFetchingToken(payload)),
    failedFetchingToken: (payload)=>dispatch(failedFetchingToken(payload)),
    stopFetchingToken: (payload) => dispatch(stopFetchingToken(payload))
  }
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(NotifService)